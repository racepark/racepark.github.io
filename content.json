{"pages":[],"posts":[{"title":"Vanilla Js 30 - 01","text":"javascript30 : https://javascript30.com/git : https://github.com/wesbos/JavaScript30 이번에 시작하는 FE study를 통해 알게 된 강좌이다. 영알못이다 보니, 무슨 얘기를 하는 지 못알아 듣는 다는 게 함정이다. 하지만, 그래도 짤막짤막하게 들리는 단어들과 영상을 보면서 충분히 코드를 공부 할 수 있기 때문에 큰 문제는 없다.강좌를 진행해가면서 ES2015 문법에 익숙해지는게 목표이다. :)영상을 볼 때마다 나온 ES2015문법을 간단하게 정리하자. 01. JavaScript Drum Kit키보드 알파벳에 따라 오디오 소리가 다르게 나며, 화면에 키보드를 누른 듯한 효과를 준다. 123456&lt;div data-key=\"65\" class=\"key\"&gt; &lt;kbd&gt;A&lt;/kbd&gt; &lt;span class=\"sound\"&gt;clap&lt;/span&gt;&lt;/div&gt;&lt;audio data-key=\"65\" src=\"sounds/clap.wav\"&gt;&lt;/audio&gt; const / 템플릿문자열123var audio = document.querySelector('audio[data-key=\"'+e.keyCode+'\"]');//ES2015const audio = document.querySelector(`audio[data-key=\"${e.keyCode}\"]`); var키워드 밖에 없었지만 let과 const 키워드가 추가되었다. var의 scope는 함수 단위지만, let과 const는 블럭 단위로 지원한다.const는 상수. 선언시에 초기값을 생략하면 안돼고, 값의 재할당이 불가하다.변수와 문자열 결합시 +기호가 아닌 백틱(`)을 사용한 템플릿 문자열(${})이 사용 가능하다. Arrow function12345keys.forEach(function(key){ return key.addEventListener('transitionend', removeTransition);});//ES2015keys.forEach(key =&gt; key.addEventListener('transitionend', removeTransition)); function(매개변수) {} 에서 (매개변수) =&gt; {} () =&gt; 매개변수가 없을경우 x =&gt; 매개변수가 1개 (x,y) =&gt; 매개변수 여러개익명 함수로만 사용할 수 있기 때문에, 호출하기 위해서는 함수 표현식을 사용한다.","link":"/2019/04/25/Vanilla-Js-30-01/"},{"title":"Vanilla Js 30 - 02~03","text":"02. JS and CSS ClockDate 객체를 이용하여 시계바늘을 돌아가게 만든다. 1234567&lt;div class=\"clock\"&gt; &lt;div class=\"clock-face\"&gt; &lt;div class=\"hand hour-hand\"&gt;&lt;/div&gt; &lt;div class=\"hand min-hand\"&gt;&lt;/div&gt; &lt;div class=\"hand second-hand\"&gt;&lt;/div&gt; &lt;/div&gt;&lt;/div&gt; 12345678910const now = new Date();// 초를 가져온다.const seconds = now.getSeconds();const secondsDegree = seconds / 60 * 360 + 90;secondHand.style.transform = `rotate(${secondsDegree}deg)`;// 분을 가져온다.const mins = now.getMinutes();// 1초 마다 setDate함수를 반복 호출setInterval(setDate, 1000); 03. CSS VariablesCSS 커스텀 속성을 활용한다. 1234567891011:root { --base: yellow; --spacing: 10px; --blur: 10px;}img{ padding: var(--spacing); background: var(--base); filter: blur(var(--blur));} 123456// data 속성 사용(dataset은 IE11부터, 10이하는 getAttribute() 사용)const suffix = this.dataset.sizing || '';// 각 input의 value를 &lt;html&gt;의 CSS CUSTOM 속성값으로 할당document.documentElement.style.setProperty(`--${this.name}`, this.value + suffix);input.forEach(input =&gt; input.addEventListener('change', handleUpdate)); 작성자가 정의하는 속성의 집합인 --var-name.(사용: var(var-name))HTML 요소에 추가적으로 데이터를 저장할 수 있게 해주는 data-*.커스텀 속성을 스크립트에서 유용하게 사용하기.","link":"/2019/04/26/Vanilla-Js-30-02-03/"},{"title":"1주차(2019.04.20)","text":"학습공간 만들기 - Hexo 이용 github blog 만들기More info: https://hexo.io/docs/deployment.html 1. Hexo CLI 설치 및 블로그 생성(Node.js 설치 필요) 1234$ npm install hexo-cli -g$ hexo init blog$ cd blog$ npm install 2. _config.yum 파일 수정- 사이트 정보12345678# Sitetitle: Race's Blogsubtitle:description:keywords:author: raceparklanguage:timezone: - git 설정123456# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: https://github.com/racepark/racepark.github.io.git branch: master 3. 테마설치- themes폴더에 테마 설치 해당 폴더를 그대로 내려 받거나 git clone 사용1$ git clone {themes repository} themes/{themes name} - _config.yml 파일 수정1234# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: icarus - 배포123$ hexo clean $ hexo generate $ hexo deploy 4. 포스트 작성 후 배포- Create a new post1$ hexo new \"My New Post!\" - Run server1$ hexo server - Generate static files1$ hexo generate - Deploy to remote sites1$ hexo deploy 이전에 jekyll로 블로그를 잠깐 했었는 데, 스터디를 시작하면서 hexo로 다시 세팅해보았다.ruby로 작업 했던 것보다 처음 세팅부터가 더 간단하게 느껴지긴 했다.아직 손 봐야 할 부분도 많고 제대로 알고 사용하는 것도 아니지만,이번 기회로 꾸준히 글도 작성하고 해서 블로그를 활성화 시켜봐야겠다!","link":"/2019/04/29/first-week/"},{"title":"2주차(2019.04.27)","text":"JS Basic Grammar Type (Primitive, Reference) Value, Expression, Statement Truthy &amp; Falsy JavaScript History https://wit.nts-corp.com/2014/08/13/1925 https://helloworldjavascript.net/pages/100-javascript.html https://ko.wikipedia.org/wiki/javascript Value, Expression, Statement- 값(Value)만들고 변경할 수 있는 데이터, 형(Type)을 표현하는 수단모든 값은 타입을 가지며 타입은 값의 종류를 포함하는 더 큰 개념으로 확장된다. - 값의 종류 숫자 - Number 문자열 - String 논리값 - Boolean 값이 정의되지 않은 - undefined 값이 없는 - Null 숫자가 아닌 - NaN 심볼 - Symbol 객체 - Object - 식(Expression)하나의 값으로 표현된다. https://www.bsidesoft.com/?p=760 *리터럴 : 더 이상 나눌 수 없는 값. - 문(Statement)의미상 한줄 한줄 각각의 명령, 지시문. 문은 파싱된 이후에 아무것도 남지 않게 되므로 값으로 쓸 수 없다. (Return을 할수 있는건 값, 식)ex. 조건문, 반복문, 제어문, 식 문, 변수선언문 … Type (Primitive, Reference)- 기본값(Primitive)참조되지 않고 복제되며 immutable한 자료형 string number boolean undefined null NaN - 참조값(Reference)복제되지 않고, 원본은 하나만 유지된 상태로, 주소만 공유되는 것(함수, 객체, 배열)초기값을 설정할 때 해당 값의 메모리를 할당 받고, 값을 사용 할 때나 함수 호출 시 할당된 메모리를 읽고 쓰기만 한다. https://developer.mozilla.org/ko/docs/Web/JavaScript/Data_structures https://weicomes.tistory.com/133 https://poiemaweb.com/js-immutability Truthy &amp; Falsyboolean 타입이 와야 하는 자리에 다른 타입의 값이 와도 실행되는 데 true로 되는 어떤 값들을 truthy, false로 취급 되는 어떤 값들을 falsy라고 부른다.false, null, undefined, 0, NaN, ‘’(빈문자열)을 제외한 모든 값들은 truthy이다. https://developer.mozilla.org/ko/docs/Glossary/Truthy","link":"/2019/04/30/second-week/"}],"tags":[{"name":"javascript","slug":"javascript","link":"/tags/javascript/"},{"name":"FEstudy","slug":"FEstudy","link":"/tags/FEstudy/"},{"name":"HEXO","slug":"HEXO","link":"/tags/HEXO/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"}],"categories":[{"name":"FEstudy","slug":"FEstudy","link":"/categories/FEstudy/"},{"name":"TIL","slug":"TIL","link":"/categories/TIL/"},{"name":"TIL-FEstudy","slug":"TIL-FEstudy","link":"/categories/TIL-FEstudy/"},{"name":"TIL - javascript30","slug":"TIL-javascript30","link":"/categories/TIL-javascript30/"},{"name":"javascript30","slug":"TIL/javascript30","link":"/categories/TIL/javascript30/"},{"name":"FEstudy","slug":"TIL/FEstudy","link":"/categories/TIL/FEstudy/"}]}