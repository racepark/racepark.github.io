{"pages":[],"posts":[{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post!\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2019/04/20/hello-world/"},{"title":"Vanilla Js 30 - 02~03","text":"02. JS and CSS ClockDate 객체를 이용하여 시계바늘을 돌아가게 만든다. 1234567&lt;div class=\"clock\"&gt; &lt;div class=\"clock-face\"&gt; &lt;div class=\"hand hour-hand\"&gt;&lt;/div&gt; &lt;div class=\"hand min-hand\"&gt;&lt;/div&gt; &lt;div class=\"hand second-hand\"&gt;&lt;/div&gt; &lt;/div&gt;&lt;/div&gt; 12345678910const now = new Date();// 초를 가져온다.const seconds = now.getSeconds();const secondsDegree = seconds / 60 * 360 + 90;secondHand.style.transform = `rotate(${secondsDegree}deg)`;// 분을 가져온다.const mins = now.getMinutes();//1초 마다 setDate함수를 반복 호출setInterval(setDate, 1000); 03. CSS VariablesCSS 커스텀 속성을 활용한다. 1234567891011:root { --base: yellow; --spacing: 10px; --blur: 10px;}img{ padding: var(--spacing); background: var(--base); filter: blur(var(--blur));} 123456// data 속성 사용(dataset은 IE11부터, 10이하는 getAttribute() 사용)const suffix = this.dataset.sizing || '';// 각 input의 value를 &lt;html&gt;의 CSS CUSTOM 속성값으로 할당document.documentElement.style.setProperty(`--${this.name}`, this.value + suffix);input.forEach(input =&gt; input.addEventListener('change', handleUpdate)); 작성자가 정의하는 속성의 집합인 --var-name.(사용: var(var-name));HTML 요소에 추가적으로 데이터를 저장할 수 있게 해주는 data-*.커스텀 속성을 스크립트에서 유용하게 사용하기.","link":"/2019/04/26/Vanilla-Js-30-02-03/"},{"title":"Vanilla Js 30 - 01","text":"javascript30 : https://javascript30.com/git : https://github.com/wesbos/JavaScript30 이번에 시작하는 FE study를 통해 알게 된 강좌이다. 영알못이다 보니, 무슨 얘기를 하는 지 못알아 듣는 다는 게 함정이다. 하지만, 그래도 짤막짤막하게 들리는 단어들과 영상을 보면서 충분히 코드를 공부 할 수 있기 때문에 큰 문제는 없다.강좌를 진행해가면서 ES2015 문법에 익숙해지는게 목표이다. :)영상을 볼 때마다 나온 ES2015문법을 간단하게 정리하자. 01. JavaScript Drum Kit키보드 알파벳에 따라 오디오 소리가 다르게 나며, 화면에 키보드를 누른 듯한 효과를 준다. 123456&lt;div data-key=\"65\" class=\"key\"&gt; &lt;kbd&gt;A&lt;/kbd&gt; &lt;span class=\"sound\"&gt;clap&lt;/span&gt;&lt;/div&gt;&lt;audio data-key=\"65\" src=\"sounds/clap.wav\"&gt;&lt;/audio&gt; const / 템플릿문자열123var audio = document.querySelector('audio[data-key=\"'+e.keyCode+'\"]');//ES2015const audio = document.querySelector(`audio[data-key=\"${e.keyCode}\"]`); var키워드 밖에 없었지만 let과 const 키워드가 추가되었다. var의 scope는 함수 단위지만, let과 const는 블럭 단위로 지원한다.const는 상수. 선언시에 초기값을 생략하면 안돼고, 값의 재할당이 불가하다.변수와 문자열 결합시 +기호가 아닌 백틱(`)을 사용한 템플릿 문자열(${})이 사용 가능하다. Arrow function12345keys.forEach(function(key){ return key.addEventListener('transitionend', removeTransition);});//ES2015keys.forEach(key =&gt; key.addEventListener('transitionend', removeTransition)); function(매개변수) {} 에서 (매개변수) =&gt; {} () =&gt; 매개변수가 없을경우 x =&gt; 매개변수가 1개 (x,y) =&gt; 매개변수 여러개익명 함수로만 사용할 수 있기 때문에, 호출하기 위해서는 함수 표현식을 사용한다.","link":"/2019/04/25/Vanilla-Js-30-01/"}],"tags":[{"name":"javascript, FEstudy","slug":"javascript-FEstudy","link":"/tags/javascript-FEstudy/"}],"categories":[]}